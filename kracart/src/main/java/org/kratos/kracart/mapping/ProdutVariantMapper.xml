<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.kratos.kracart.model.ProductVariantModel">
	
	<resultMap type="ProductVariant" id="rmVariantGroup">
		<id property="id" column="products_variants_groups_id" />
		<result property="languageId" column="language_id" />
		<result property="name" column="products_variants_groups_name" />
	</resultMap>
	<resultMap type="ProductVariant" id="rmVariantEntry">
		<id property="id" column="products_variants_values_id" />
		<result property="languageId" column="language_id" />
		<result property="name" column="products_variants_values_name" />
	</resultMap>
	
	<select id="getVariantGroups" parameterType="map" resultMap="rmVariantGroup">
		select products_variants_groups_id, products_variants_groups_name
		  from toc_products_variants_groups
		 where language_id = #{langId}
		 order by products_variants_groups_name
		 <if test="start != null and limit != null">
		 	limit #{start}, #{limit}
		 </if>
	</select>
	<select id="getVariantEntries" parameterType="map" resultMap="rmVariantEntry">
		select pvv.products_variants_values_id, pvv.products_variants_values_name
		  from toc_products_variants_values pvv
		 inner join toc_products_variants_values_to_products_variants_groups pvv2pvg
		    on pvv2pvg.products_variants_values_id = pvv.products_variants_values_id 
		 where pvv2pvg.products_variants_groups_id = #{groupsId}
		   and pvv.language_id = #{langId}
		 order by pvv.products_variants_values_name
	</select>
	<select id="getVariantEntriesByGroup" parameterType="int" resultType="int">
		select products_variants_values_id
		  from toc_products_variants_values_to_products_variants_groups
		 where products_variants_groups_id = #{id}
	</select>
	<select id="getVariantGroup" parameterType="int" resultMap="rmVariantGroup">
		select products_variants_groups_id, language_id, products_variants_groups_name
		  from toc_products_variants_groups
		 where products_variants_groups_id = #{id}
	</select>
	<select id="getVariantValue" parameterType="int" resultMap="rmVariantEntry">
		select products_variants_values_id, language_id, products_variants_values_name
		  from toc_products_variants_values
		 where products_variants_values_id = #{id}
	</select>
	<select id="getMaxVariantGroupId" resultType="int">
		select max(products_variants_groups_id)
		  from toc_products_variants_groups
	</select>
	<insert id="insertVariantGroup" parameterType="ProductVariant">
		insert into toc_products_variants_groups(products_variants_groups_id, language_id, products_variants_groups_name)
		values(#{id}, #{languageId}, #{name})
	</insert>
	<update id="updateVariantGroup" parameterType="ProductVariant">
		update toc_products_variants_groups
		   set products_variants_groups_name = #{name}
		 where products_variants_groups_id = #{id}
		   and language_id = #{languageId}
	</update>
	<select id="getMaxVariantValueId" resultType="int">
		select max(products_variants_values_id)
		  from toc_products_variants_values
	</select>
	<insert id="insertVariantValue" parameterType="ProductVariant">
		insert into toc_products_variants_values(products_variants_values_id, language_id, products_variants_values_name)
		values(#{id}, #{languageId}, #{name})
	</insert>
	<update id="updateVariantValue" parameterType="ProductVariant">
		update toc_products_variants_values
		   set products_variants_values_name = #{name}
		 where products_variants_values_id = #{id}
		   and language_id = #{languageId}
	</update>
	<insert id="insertVariantValueToGroup" parameterType="map">
		insert into toc_products_variants_values_to_products_variants_groups(products_variants_groups_id, products_variants_values_id)
		values(#{groupsId}, #{valuesId})
	</insert>
	<select id="getVariantValueName" parameterType="map" resultType="string">
		select v.products_variants_values_name
		  from toc_products_variants_entries e
		 inner join toc_products_variants_values v 
		    on v.products_variants_values_id = e.products_variants_values_id
		 where v.products_variants_values_id = #{valuesId}
   		   and v.language_id = #{languageId}
	</select>
	<delete id="deleteVariantValue" parameterType="int">
		delete
		  from toc_products_variants_values
		 where products_variants_values_id = #{id}
	</delete>
	<delete id="deleteVariantValueToGroup" parameterType="map">
		delete
		  from toc_products_variants_values_to_products_variants_groups
		<trim prefix="where" prefixOverrides="and">
		  <if test="groupsId != null and groupsId > 0">
		    and products_variants_groups_id = #{groupsId}
		  </if>
		  <if test="valuesId != null and valuesId > 0">
		    and products_variants_values_id = #{valuesId}
		  </if>
		</trim>
	</delete>
	<select id="getProductVariantCount" parameterType="int" resultType="int">
		select count(*)
		  from toc_products_variants_entries
		 where products_variants_groups_id = #{id}
	</select>
	<delete id="deleteProductVariant" parameterType="int">
		delete
		  from toc_products_variants_groups
		 where products_variants_groups_id = #{id}
	</delete>
</mapper>