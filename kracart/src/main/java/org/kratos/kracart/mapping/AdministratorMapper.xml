<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.kratos.kracart.model.AdministratorModel">
	
	<resultMap type="Administrator" id="rmAdmin">
		<id property="id" column="id" />
		<result property="name" column="user_name" />
		<result property="email" column="email_address" />
	</resultMap>
	<resultMap type="Administrator" id="rmAdminLevels">
		<id property="id" column="id" />
		<result property="name" column="user_name" />
		<collection property="access" ofType="AdministratorAccess" column="administrators_id">
			<result property="module" column="module" />
		</collection>
	</resultMap>
	
	<sql id="selectAdminstrator">
		select id, user_name, email_address
		  from toc_administrators
	</sql>
	
	<select id="getAdministrator" parameterType="Administrator" resultMap="rmAdmin">
		<include refid="selectAdminstrator"/>
		<trim prefix="where" prefixOverrides="and">
			<if test="id != null and id > 0">
				and id = #{id}
			</if>
			<if test="email != null">
				and email_address = #{email}
			</if>
			<if test="name != null">
				and user_name = #{name}
			</if>
		</trim>
		limit 1
	</select>
	
	<select id="getAdministrators" parameterType="map" resultMap="rmAdmin">
		<include refid="selectAdminstrator"/>
		 order by user_name
		 <if test="start != null and limit != null">
		 	limit #{start}, #{limit}
		 </if>
	</select>
	
	<select id="getAdminSettingByName" parameterType="string" resultType="string">
		select user_settings
		  from toc_administrators
		 where user_name = #{name}
	</select>
	
	<select id="getAdminLevels" parameterType="string" resultMap="rmAdminLevels">
		select a.id, a.user_name as name, ac.module
		  from toc_administrators a
		 inner join toc_administrators_access ac on ac.administrators_id = a.id
		 where a.user_name = #{name}
	</select>
	
	<select id="getAdminAccessModule" parameterType="AdministratorAccess" resultType="AdministratorAccess">
		select administrators_id as id, module
		  from toc_administrators_access
		 where administrators_id = #{id}
		   and module = #{module}
	</select>
	
	<update id="updatePassword" parameterType="Administrator">
		update toc_administrators
		   set user_password = #{password}
		 where email_address = #{email}
	</update>
	
	<update id="updateAdminSetting" parameterType="map">
		update toc_administrators
		   set user_settings = #{setting}
		 where user_name = #{name}
	</update>
	
	<update id="updateAdministrator" parameterType="Administrator">
		update toc_administrators
		<trim prefix="set" suffixOverrides=",">
		   	<if test="name != null">user_name = #{name},</if>
		   	<if test="password != null">user_password = #{password},</if>
		   	<if test="email != null">email_address = #{email}</if>
		 </trim>
		 where id = #{id}
	</update>
	
	<insert id="insertAdministrator" parameterType="Administrator" 
		keyColumn="id" keyProperty="id" useGeneratedKeys="true">
		insert into toc_administrators (user_name, user_password, email_address)
		values (#{name}, #{password}, #{email})		
	</insert>
	
	<delete id="deleteAdministrator" parameterType="int">
		delete
		  from toc_administrators
		 where id = #{id}
	</delete>

	<insert id="insertAdministratorAccess" parameterType="AdministratorAccess">
		insert into toc_administrators_access (administrators_id, module)
		values (#{id}, #{module})
	</insert>

	<delete id="deleteAdministratorAccess" parameterType="map">
		delete 
		  from toc_administrators_access
		 where administrators_id = #{id}
		   and module not in
		   <foreach collection="modules" index="index" item="module" open="(" separator="," close=")">
		   	#{module}
		   </foreach>
	</delete>
	
	<delete id="deleteAdministratorAccessById" parameterType="int">
		delete 
		  from toc_administrators_access
		 where administrators_id = #{id}
	</delete>
	
</mapper>